# -*- coding: utf-8 -*-
"""Problemset3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Y0-QovZdS8SqFjlTw32S-Q-7JIour-E
"""

class Fraction():
  def __init__(self, numerator, denominator):
    # assert given numbers are valid
    assert denominator!=0, "integer division by zero"
    assert isinstance(denominator, int), "must be int"
    assert isinstance(numerator, int), "must be int"

    self.numerator = numerator
    self.denominator = denominator

    self.reduce()

  def reduce(self):

    def gcd(n, d):
        while d != 0:
            t = d
            d = n%d
            n = t
        return n
    
    greatest=gcd(self.numerator,self.denominator)
    self.numerator/=greatest
    self.denominator/=greatest
    return self.numerator, self.denominator

  def __add__(self,other):
    def gcd(n, d):
        while d != 0:
            t = d
            d = n%d
            n = t
        return n
    # 2 __add__ fubction
    #lcm- least common multiple

    lcm = (self.denominator * other.denominator) // gcd(self.denominator,other.denominator)
    sum = (self.numerator * lcm // self.denominator) + (other.numerator * lcm // other.denominator)

    num3 = sum // gcd(sum,lcm)
    den3 = lcm // gcd(sum,lcm)
    
    # reduce
    greatest=gcd(num3,den3)
    num3/=greatest
    den3/=greatest
    return f"({int(self.numerator)}/{int(self.denominator)})+({int(other.numerator)}/{int(other.denominator)})={int(num3)}/{int(den3)}"

  # __str__ method
  def __str__(self):
    return f"{int(self.numerator)}/{int(self.denominator)}"
  #__repr__method
  def __repr__(self):
    eval('self.numarator'/'self.denominator')
    
f1 = Fraction(20,2)
f2 = Fraction(30,15)
print(f1)
print(f2)
print(f1+f2)